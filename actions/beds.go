package actions

import (
	"beds/models"
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Bed)
// DB Table: Plural (beds)
// Resource: Plural (Beds)
// Path: Plural (/beds)
// View Template Folder: Plural (/templates/beds/)

// BedsResource is the resource for the Bed model
type BedsResource struct {
	buffalo.Resource
}

// List gets all Beds. This function is mapped to the path
// GET /beds
func (v BedsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	beds := &models.Beds{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Beds from the DB
	if err := q.All(beds); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("beds", beds)
		return c.Render(http.StatusOK, r.HTML("/beds/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(beds))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(beds))
	}).Respond(c)
}

// Show gets the data for one Bed. This function is mapped to
// the path GET /beds/{bed_id}
func (v BedsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bed
	bed := &models.Bed{}
	userID := c.Session().Get("userid").(uuid.UUID)
	c.Set("userid", userID)

	// To find the Bed the parameter bed_id is used.
	if err := tx.Find(bed, c.Param("bed_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("bed", bed)

		return c.Render(http.StatusOK, r.HTML("/beds/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(bed))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(bed))
	}).Respond(c)
}

// New renders the form for creating a new Bed.
// This function is mapped to the path GET /beds/new
func (v BedsResource) New(c buffalo.Context) error {
	c.Set("bed", &models.Bed{})

	return c.Render(http.StatusOK, r.HTML("/beds/new.plush.html"))
}

// Create adds a Bed to the DB. This function is mapped to the
// path POST /beds
func (v BedsResource) Create(c buffalo.Context) error {
	// Allocate an empty Bed
	bed := &models.Bed{}

	// Bind bed to the html form elements
	if err := c.Bind(bed); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	userID := c.Session().Get("userid").(uuid.UUID)
	bed.UserID = userID

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(bed)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("bed", bed)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/beds/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "bed.created.success"))

		// and redirect to the user show page
		return c.Redirect(http.StatusSeeOther, "/users/%v", userID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(bed))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(bed))
	}).Respond(c)
}

// Edit renders a edit form for a Bed. This function is
// mapped to the path GET /beds/{bed_id}/edit
func (v BedsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bed
	bed := &models.Bed{}

	if err := tx.Find(bed, c.Param("bed_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("bed", bed)
	return c.Render(http.StatusOK, r.HTML("/beds/edit.plush.html"))
}

// Update changes a Bed in the DB. This function is mapped to
// the path PUT /beds/{bed_id}
func (v BedsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bed
	bed := &models.Bed{}

	if err := tx.Find(bed, c.Param("bed_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Bed to the html form elements
	if err := c.Bind(bed); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(bed)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("bed", bed)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/beds/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "bed.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/beds/%v", bed.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(bed))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(bed))
	}).Respond(c)
}

// Destroy deletes a Bed from the DB. This function is mapped
// to the path DELETE /beds/{bed_id}
func (v BedsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bed
	bed := &models.Bed{}

	// To find the Bed the parameter bed_id is used.
	if err := tx.Find(bed, c.Param("bed_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(bed); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "bed.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/beds")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(bed))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(bed))
	}).Respond(c)
}

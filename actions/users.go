package actions

import (
	"beds/models"
	"database/sql"
	"fmt"
	"net/http"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/envy"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/pkg/errors"
	"golang.org/x/crypto/bcrypt"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

// UsersResource is the resource for the User model
type UsersResource struct {
	buffalo.Resource
}

// List gets all Users. This function is mapped to the path
// GET /users
func (v UsersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	users := &models.Users{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Users from the DB
	if err := q.All(users); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("users", users)
		return c.Render(http.StatusOK, r.HTML("/users/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(users))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(users))
	}).Respond(c)
}

// Show gets the data for one User. This function is mapped to
// the path GET /users/{user_id}
func (v UsersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	beds := []models.Bed{}
	if err := tx.Where("user_id = ?", user.ID).All(&beds); err != nil {
		if errors.Cause(err) != sql.ErrNoRows {
			return c.Error(http.StatusInternalServerError, err)
		}
	}

	var completeBeds []models.Bed
	var incompleteBeds []models.Bed
	for _, bed := range beds {
		// split beds in completed and incomplete pile
		if bed.Complete {
			completeBeds = append(completeBeds, bed)
		} else {
			incompleteBeds = append(incompleteBeds, bed)
		}
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("user", user)
		c.Set("beds", beds)
		c.Set("completeBeds", completeBeds)
		c.Set("incompleteBeds", incompleteBeds)

		return c.Render(http.StatusOK, r.HTML("/users/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(user))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(user))
	}).Respond(c)
}

// New renders the form for creating a new User.
// This function is mapped to the path GET /users/new
func (v UsersResource) New(c buffalo.Context) error {
	c.Set("user", &models.User{})

	return c.Render(http.StatusOK, r.HTML("/users/new.plush.html"))
}

// Create adds a User to the DB. This function is mapped to the
// path POST /users
func (v UsersResource) Create(c buffalo.Context) error {
	// Allocate an empty User
	user := &models.User{}

	// Bind user to the html form elements
	if err := c.Bind(user); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(user)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			user.Password = ""
			c.Set("user", user)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/users/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	oneWeekInFuture := time.Now().AddDate(0, 0, 7).UTC().Unix()

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, &jwt.StandardClaims{
		ExpiresAt: oneWeekInFuture,
		Issuer:    "main",
	})
	tokenString, err := token.SignedString([]byte(envy.Get("BEDS_JWT_SECRET", "")))
	if err != nil {
		return fmt.Errorf("failed to sign token %w", err)
	}

	ck := http.Cookie{
		Name:    "jwt",
		Value:   tokenString,
		Path:    "/",
		Expires: time.Now().Add(30 * 24 * time.Hour),
	}

	ck2 := http.Cookie{
		Name:    "user_id",
		Value:   user.ID.String(),
		Path:    "/",
		Expires: time.Now().Add(30 * 24 * time.Hour),
	}

	http.SetCookie(c.Response(), &ck2)
	http.SetCookie(c.Response(), &ck)

	user.Password = ""

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "user.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/users/%v", user.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(user))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(user))
	}).Respond(c)
}

// Edit renders a edit form for a User. This function is
// mapped to the path GET /users/{user_id}/edit
func (v UsersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("user", user)
	return c.Render(http.StatusOK, r.HTML("/users/edit.plush.html"))
}

// Update changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func (v UsersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(user)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("user", user)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/users/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "user.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/users/%v", user.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(user))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(user))
	}).Respond(c)
}

// Destroy deletes a User from the DB. This function is mapped
// to the path DELETE /users/{user_id}
func (v UsersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(user); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "user.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/users")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(user))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(user))
	}).Respond(c)
}

func (v UsersResource) SignInPage(c buffalo.Context) error {
	user := &models.User{}

	c.Set("user", user)

	return c.Render(http.StatusOK, r.HTML("/users/signin.plush.html"))
}

func (v UsersResource) SignIn(c buffalo.Context) error {
	var user models.User
	if err := c.Bind(&user); err != nil {
		return fmt.Errorf("failed to bind user: %w", err)
	}
	c.Set("user", user)

	if user.Email == "" {
		c.Set("error", "email must not be blank")
		return c.Render(http.StatusUnprocessableEntity, r.HTML("/users/signin.plush.html"))
	}

	if user.Password == "" {
		c.Set("error", "password must not be blank")
		return c.Render(http.StatusUnprocessableEntity, r.HTML("/users/signin.plush.html"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Go get the user from the database with this email
	var checkUser models.User
	if err := tx.Where("email = ?", user.Email).First(&checkUser); err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			c.Set("error", "no user was found with this email")
			return c.Render(http.StatusUnprocessableEntity, r.HTML("/users/signin.plush.html"))
		}
		return fmt.Errorf("failed to find a user with this email: %w", err)
	}

	if err := bcrypt.CompareHashAndPassword([]byte(checkUser.Password), []byte(user.Password)); err != nil {
		c.Set("error", "password was incorrect")
		return c.Render(http.StatusUnprocessableEntity, r.HTML("users/signin.plush.html"))
	}

	oneWeekInFuture := time.Now().AddDate(0, 0, 7).UTC().Unix()

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, &jwt.StandardClaims{
		ExpiresAt: oneWeekInFuture,
		Issuer:    "main",
	})
	tokenString, err := token.SignedString([]byte(envy.Get("BEDS_JWT_SECRET", "")))
	if err != nil {
		return fmt.Errorf("failed to sign token %w", err)
	}

	ck := http.Cookie{
		Name:    "jwt",
		Value:   tokenString,
		Path:    "/",
		Expires: time.Now().Add(30 * 24 * time.Hour),
	}

	ck2 := http.Cookie{
		Name:    "user_id",
		Value:   checkUser.ID.String(),
		Path:    "/",
		Expires: time.Now().Add(30 * 24 * time.Hour),
	}

	http.SetCookie(c.Response(), &ck2)
	http.SetCookie(c.Response(), &ck)

	user.Password = ""
	user.CreatedAt = checkUser.CreatedAt
	user.ID = checkUser.ID
	user.UpdatedAt = checkUser.UpdatedAt

	return c.Redirect(http.StatusSeeOther, fmt.Sprintf("/users/%s", checkUser.ID))
}

func (v UsersResource) SignOut(c buffalo.Context) error {
	c.Session().Clear()
	deleteUserIDCookie := http.Cookie{
		Name:    "user_id",
		Value:   "v",
		Path:    "/",
		Expires: time.Now().AddDate(-10, 0, 0),
	}
	http.SetCookie(c.Response(), &deleteUserIDCookie)
	deleteJWTCookie := http.Cookie{
		Name:    "jwt",
		Value:   "v",
		Path:    "/",
		Expires: time.Now().AddDate(-10, 0, 0),
	}
	http.SetCookie(c.Response(), &deleteJWTCookie)
	return c.Redirect(http.StatusSeeOther, "/")
}

func (v UsersResource) FindByEmail(c buffalo.Context) error {

	var user models.User

	if err := c.Bind(&user); err != nil {
		return fmt.Errorf("failed to bind: %w", err)
	}

	// Check if the user exists
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("transaction does not exist")
	}

	if err := tx.Where("email = ?", user.Email).First(&user); err != nil {
		return fmt.Errorf("failed to get user by email: %w", err)
	}

	user.Password = ""

	return c.Render(200, r.JSON(user))
}
